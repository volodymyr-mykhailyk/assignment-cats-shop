name: main
on:
  push:
    branches:
      - master

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ops/infrastructure/live
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.2

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Save Outputs
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          mkdir output
          terraform-bin output -raw ecr_repository_url > output/ecr_repository_url.txt
          terraform-bin output -raw eks_cluster_name > output/eks_cluster_name.txt
          terraform-bin output -raw eks_cluster_certificate > output/eks_cluster_certificate.txt
          terraform-bin output -raw database_url > output/database_url.txt

      - name: Store infrastructure information
        uses: actions/upload-artifact@v2
        with:
          name: infrastructure-live
          path: ops/infrastructure/live/output/

  build:
    runs-on: ubuntu-latest
    needs: [infrastructure]
    services:
      database:
        image: postgres:12.1-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: pass
        ports:
          - '5432:5432'
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.OS }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.OS }}-gems-

      - name: Set up Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7.x'
      - name: Install PostgreSQL dependencies
        run: sudo apt-get -yqq install libpq-dev
      - name: Set up Bundler
        run: |
          gem install bundler:2.1.4
          bundle config set path 'vendor/bundle'
      - name: Set up Dependencies
        run: bundle install

      - name: Set up Database
        env:
          DATABASE_URL: postgresql://app:pass@localhost:5432/cats_shop_test
          RACK_ENV: test
        run: |
          bundle exec rake db:create
          bundle exec rake db:migrate

      - name: Run Unit Tests
        env:
          DATABASE_URL: postgresql://app:pass@localhost:5432/cats_shop_test
          RACK_ENV: test
        run: bundle exec rspec

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cats-shop
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: [infrastructure, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v1


