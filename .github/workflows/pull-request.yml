name: pull-request
on:
  pull_request:
    branches:
      - master

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PULL_REQUEST_ID: ${{ github.event.number }}

jobs:
  infrastructure-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ops/infrastructure/live
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \n
            \`\`\`
            ${process.env.PLAN}
            \`\`\`
            </details>
            \n
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  build:
    runs-on: ubuntu-latest
    services:
      database:
        image: postgres:12.1-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: pass
        ports:
          - '5432:5432'
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.OS }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: ${{ runner.OS }}-gems-

      - name: Set up Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7.x'
      - name: Install PostgreSQL dependencies
        run: sudo apt-get -yqq install libpq-dev
      - name: Set up Bundler
        run: |
          gem install bundler:2.1.4
          bundle config set path 'vendor/bundle'
      - name: Set up Dependencies
        run: bundle install

      - name: Set up Database
        env:
          DATABASE_URL: postgresql://app:pass@localhost:5432/cats_shop_test
          RACK_ENV: test
        run: |
          bundle exec rake db:create
          bundle exec rake db:migrate

      - name: Run Unit Tests
        env:
          DATABASE_URL: postgresql://app:pass@localhost:5432/cats_shop_test
          RACK_ENV: test
        run: bundle exec rspec

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cats-shop
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          mkdir outputs
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > outputs/docker_image.txt

      - name: Store build information
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: outputs

  infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ops/infrastructure/pull-request
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.2

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="id=${PULL_REQUEST_ID}"

      - name: Save Results To Artifacts
        run: |
          mkdir outputs
          terraform-bin output -raw name > outputs/name.txt

      - name: Store infrastructure information
        uses: actions/upload-artifact@v2
        with:
          name: infrastructure
          path: ops/infrastructure/live/outputs/

